AWSTemplateFormatVersion: '2010-09-09'

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTP
      VpcId: !ImportValue VPCID
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      HealthCheckPath: /healthcheck
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !ImportValue LoadBalancerArn
      Port: 80
      Protocol: HTTP
      
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppContainerSecurityGroup
      VpcId: !ImportValue VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 5000
          SourceSecurityGroupId: !ImportValue LoadBalancerSecGroupId

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: AppTaskDefinition
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      RequiresCompatibilities:
        - FARGATE
      Memory: 0.5Gb
      Cpu: 256
      ContainerDefinitions:
        - Name: ServiceContainer
          PortMappings:
            - ContainerPort: 5000
          Essential: true
          Image: 855097409413.dkr.ecr.eu-west-1.amazonaws.com/ecs-ecrrepo-1thi3ve97pvld:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AppExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRule
    Properties:
      Cluster: !ImportValue ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: ServiceContainer
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 30
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue PublicSubnetA
            - !ImportValue PublicSubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup

        
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
            
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join ["/", [service, !ImportValue ECSCluster, !GetAtt Service.Name]]
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ServiceAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 70

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/aiohttp
      RetentionInDays: 7